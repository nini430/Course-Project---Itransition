// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  firstName    String
  lastName     String
  phoneNumber String
  email        String       @unique
  password     String?
  role         Role         @default(BASIC)
  status Statuses @default(active)
  profileImage String?
  collections  Collection[]
  comments     Comment[]
  itemReactions  ItemReaction[]
  commentReactions CommentReaction[]
  followedIds Follow[] @relation("followed")
  followerIds Follow[] @relation("follower")
  senderMessages Message[] @relation("sender")
  receiverMessages Message[] @relation("receiver")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  accountStatus AccountStatus @default(PUBLIC)
  isEmailVerified Boolean @default(false)
  social Socials?
  googleId String?
  githubId String?
  phoneCountryCode String
}



model Follow {
  id String @id @default(uuid())
  followerId String
  followedId String
  follower User @relation("follower",fields: [followedId],references: [id],onDelete: Cascade)
  followed User @relation("followed",fields: [followerId],references: [id],onDelete: Cascade)

}

model Message {
  id String @id @default(uuid())
  text String
  image String?
  senderId String
  receiverId String
  sender User @relation("sender",fields: [senderId],references: [id],onDelete: Cascade)
  receiver User @relation("receiver",fields: [receiverId],references: [id],onDelete: Cascade)
  chatId String
  chat Chat @relation(fields: [chatId],references: [id],onDelete: Cascade)
  type String @default("text")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Chat {
  id String @id @default(uuid())
  messages Message[]
  memberOneId String
  memberTwoId String
}


model Collection {
  id                   String                 @id @default(uuid())
  name                 String
  topic                CollectionTopic
  description          String                 @db.VarChar(4000)
  image                String?
  authorId             String
  author               User                   @relation(fields: [authorId], references: [id],onDelete: Cascade)
  items                Item[]
  integerItems         IntegerField[]
  stringItems          StringField[]
  multilineItems       MultilineTextField[]
  booleancheckboxItems BooleanCheckboxField[]
  dateItems            DateField[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model Item {
  id                String     @id @default(uuid())
  name              String
  tags              String
  collectionId      String
  collection        Collection @relation(fields: [collectionId], references: [id],onDelete: Cascade)
  customFieldValues Json
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  comments          Comment[]
  reactions ItemReaction[]
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  image String?
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions CommentReaction[]
}

model IntegerField {
  id           String      @id @default(uuid())
  name         String
  collectionId String
  type         String      @default("integer")
  collection   Collection? @relation(fields: [collectionId], references: [id],onDelete: Cascade)
}

model StringField {
  id           String      @id @default(uuid())
  name         String
  collectionId String
  type         String      @default("string")
  collection   Collection? @relation(fields: [collectionId], references: [id],onDelete: Cascade)
}

model MultilineTextField {
  id           String      @id @default(uuid())
  name         String
  collectionId String
  type         String      @default("multiline")
  collection   Collection? @relation(fields: [collectionId], references: [id],onDelete: Cascade)
}

model BooleanCheckboxField {
  id           String      @id @default(uuid())
  name         String
  collectionId String
  type         String      @default("boolean")
  collection   Collection? @relation(fields: [collectionId], references: [id],onDelete: Cascade)
}

model DateField {
  id           String      @id @default(uuid())
  name         String
  collectionId String
  type         String      @default("date")
  collection   Collection? @relation(fields: [collectionId], references: [id],onDelete: Cascade)
}

model ItemReaction {
  id   String @id @default(uuid())
  name Emojis @default(like)
  userId String
  user User  @relation(fields: [userId],references: [id],onDelete: Cascade)
  itemId String
  item Item @relation(fields: [itemId],references: [id],onDelete: Cascade)
}


model CommentReaction {
  id   String @id @default(uuid())
  name Emojis @default(like)
  userId String
  user User  @relation(fields: [userId],references: [id],onDelete: Cascade)
  commentId String
  comment Comment @relation(fields: [commentId],references: [id],onDelete: Cascade)
}

model Token {
  id String @id @default(uuid())
  userId String
  tokenExpire BigInt
  hashedToken String
  name String
}

enum CollectionTopic {
  books
  chocolates
  whiskeys
  watches
}

enum Role {
  BASIC
  ADMIN
}

enum Emojis {
  like
  love
  haha
  wow
  angry
  sad
}

enum Statuses {
  active
  blocked
  deleted
}

enum AccountStatus {
  PUBLIC
  PRIVATE
}

enum TokenNames {
  password
  email
}

enum Socials {
  GOOGLE
  GITHUB
}